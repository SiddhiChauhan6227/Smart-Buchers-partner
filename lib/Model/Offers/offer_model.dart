class Autogenerated {
  bool error;
  String message;
  List<OffersModel> data;

  Autogenerated({
    required this.error,
    required this.message,
    required this.data,
  });

  factory Autogenerated.fromJson(Map<String, dynamic> json) {
    return Autogenerated(
      error: json['error'],
      message: json['message'],
      data: List<OffersModel>.from(
        json['data'].map((v) => OffersModel.fromJson(v)),
      ),
    );
  }

  Map<String, dynamic> toJson() => {
    'error': error,
    'message': message,
    'data': data.map((v) => v.toJson()).toList(),
  };
}

class OffersModel {
  String id;
  String type;
  String typeId;
  String image;
  String banner;
  String startDate;
  String endDate;
  String partnerId;
  String status;
  String dateAdded;
  String bannerImage;
  String? relativePath;
  String? bannerRelativePath;
  List<CategoryData> data;

  OffersModel({
    required this.id,
    required this.type,
    required this.typeId,
    required this.image,
    required this.banner,
    required this.startDate,
    required this.endDate,
    required this.partnerId,
    required this.status,
    required this.dateAdded,
    required this.bannerImage,
    required this.relativePath,
    required this.bannerRelativePath,
    required this.data,
  });

  factory OffersModel.fromJson(Map<String, dynamic> json) {
    return OffersModel(
      id: json['id'],
      type: json['type'],
      typeId: json['type_id'],
      image: json['image'],
      banner: json['banner'],
      startDate: json['start_date'],
      endDate: json['end_date'],
      partnerId: json['partner_id'],
      status: json['status'],
      dateAdded: json['date_added'],
      bannerImage: json['banner_image'],
      relativePath: json['relative_path'],
      bannerRelativePath: json['banner_relative_path'],
      data: List<CategoryData>.from(
        (json['data'] ?? []).map((v) => CategoryData.fromJson(v)),
      ),
    );
  }

  Map<String, dynamic> toJson() => {
    'id': id,
    'type': type,
    'type_id': typeId,
    'image': image,
    'banner': banner,
    'start_date': startDate,
    'end_date': endDate,
    'partner_id': partnerId,
    'status': status,
    'date_added': dateAdded,
    'banner_image': bannerImage,
    'banner_relative_path': bannerRelativePath,
    'relative_path': relativePath,
    'data': data.map((v) => v.toJson()).toList(),
  };
}

class CategoryData {
  String id;
  String name;
  String parentId;
  String slug;
  String image;
  String banner;
  String rowOrder;
  String status;
  String clicks;
  List<String> children;
  String text;
  NodeState state;
  String icon;
  int level;
  int total;

  CategoryData({
    required this.id,
    required this.name,
    required this.parentId,
    required this.slug,
    required this.image,
    required this.banner,
    required this.rowOrder,
    required this.status,
    required this.clicks,
    required this.children,
    required this.text,
    required this.state,
    required this.icon,
    required this.level,
    required this.total,
  });

  factory CategoryData.fromJson(Map<String, dynamic> json) {
    return CategoryData(
      id: json['id'],
      name: json['name'],
      parentId: json['parent_id'],
      slug: json['slug'],
      image: json['image'],
      banner: json['banner'],
      rowOrder: json['row_order'],
      status: json['status'],
      clicks: json['clicks'],
      children: List<String>.from(json['children'] ?? []),
      text: json['text'],
      state: NodeState.fromJson(json['state']),
      icon: json['icon'],
      level: json['level'],
      total: json['total'],
    );
  }

  Map<String, dynamic> toJson() => {
    'id': id,
    'name': name,
    'parent_id': parentId,
    'slug': slug,
    'image': image,
    'banner': banner,
    'row_order': rowOrder,
    'status': status,
    'clicks': clicks,
    'children': children,
    'text': text,
    'state': state.toJson(),
    'icon': icon,
    'level': level,
    'total': total,
  };
}

class NodeState {
  bool opened;

  NodeState({required this.opened});

  factory NodeState.fromJson(Map<String, dynamic> json) {
    return NodeState(opened: json['opened']);
  }

  Map<String, dynamic> toJson() => {
    'opened': opened,
  };
}
